pipeline {
    agent any

    parameters {
        string(name: 'GIT_URL', defaultValue: 'https://github.com/nhatthaiquang-agilityio/spring-minikube.git', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to build')
    }

    environment {
        SONARQUBE_ENV = 'sonar-java'   // Jenkins SonarQube server name
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH}", url: "${params.GIT_URL}"
            }
        }

        stage('Credential Scanning - Gitleaks') {
            steps {
                sh '''
                echo "Running Gitleaks..."
                if ! command -v gitleaks &> /dev/null
                then
                    wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
                    tar -xvf gitleaks_8.18.2_linux_x64.tar.gz
                    sudo mv gitleaks /usr/local/bin/
                fi
                gitleaks detect --source . --report-path gitleaks-report.json || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'gitleaks-report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Code Compilation') {
            steps {
                sh 'mvn clean compile -f student-service/pom.xml'
                sh 'mvn clean compile -f rating-service/pom.xml'
            }
        }

        stage('Unit Testing & Coverage') {
            steps {
                sh 'mvn test jacoco:report -f student-service/pom.xml'
                sh 'mvn test jacoco:report -f rating-service/pom.xml'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Static Analysis & Bug Analysis - SonarQube') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                    echo "Running SonarQube analysis..."

                    # Student Service
                    mvn sonar:sonar \
                        -f student-service/pom.xml \
                        -Dsonar.projectKey=student-service \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_AUTH_TOKEN

                    # Rating Service
                    mvn sonar:sonar \
                        -f rating-service/pom.xml \
                        -Dsonar.projectKey=rating-service \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('Dependency Scanning') {
            steps {
                sh 'mvn org.owasp:dependency-check-maven:check -f student-service/pom.xml'
                sh 'mvn org.owasp:dependency-check-maven:check -f rating-service/pom.xml'
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/target/dependency-check-report.html', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                docker build -t student-service:latest student-service/
                docker build -t rating-service:latest rating-service/
                '''
            }
        }

        stage('Docker Image Scanning - Trivy') {
            steps {
                sh '''
                echo "Running Trivy scan on Docker images..."

                # Install Trivy if not available
                if ! command -v trivy &> /dev/null
                then
                    sudo apt-get update
                    sudo apt-get install -y wget apt-transport-https gnupg lsb-release
                    wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                    echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
                    sudo apt-get update
                    sudo apt-get install -y trivy
                fi

                # Scan images and generate TXT reports
                trivy image --exit-code 0 --format table -o student-service-trivy-report.txt student-service:latest
                trivy image --exit-code 0 --format table -o rating-service-trivy-report.txt rating-service:latest

                # Generate JSON reports for advanced reporting
                trivy image --exit-code 0 --format json -o student-service-trivy-report.json student-service:latest
                trivy image --exit-code 0 --format json -o rating-service-trivy-report.json rating-service:latest
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: '*-trivy-report.*', allowEmptyArchive: true
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                sh '''
                kubectl apply -f devops/deployment-student.yml
                kubectl apply -f devops/service-student.yml
                kubectl apply -f devops/deployment-rating.yml
                kubectl apply -f devops/service-rating.yml
                kubectl apply -f devops/ingress.yml
                '''
            }
        }

        stage('DAST - OWASP ZAP Scan') {
            steps {
                sh '''
                echo "Running OWASP ZAP DAST Scan..."

                # Install ZAP if not available
                if ! command -v zap-baseline.py &> /dev/null
                then
                    sudo apt-get update
                    sudo apt-get install -y zaproxy
                fi

                # Target URL (update if ingress exposes a different host)
                TARGET_URL="http://localhost"

                # Run ZAP Baseline Scan
                zap-baseline.py -t $TARGET_URL -r zap-report.html -J zap-report.json || true

                # Optional: generate full HTML report from JSON using zap-cli
                if command -v zap-cli &> /dev/null
                then
                    zap-cli report -o zap-report-full.html -f html
                fi
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'zap-report.html,zap-report.json,zap-report-full.html', allowEmptyArchive: true
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished. Sending notifications..."
        }
        success {
            echo " Build, Security Checks & Deployment Successful!"
        }
        failure {
            echo " Pipeline Failed!"
        }
    }
}
