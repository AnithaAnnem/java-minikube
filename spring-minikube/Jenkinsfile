pipeline {
    agent any

    parameters {
        string(name: 'GIT_URL', defaultValue: 'https://github.com/AnithaAnnem/java-minikube.git', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        SONARQUBE_ENV = 'sonar-java'
        SONAR_AUTH_TOKEN = credentials('anitha-sonar')
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH}", url: "${params.GIT_URL}"
            }
        }

        stage('Credential Scanning - Gitleaks') {
            steps {
                sh '''
                echo "Running Gitleaks..."
                if ! command -v gitleaks &> /dev/null
                then
                    wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
                    tar -xvf gitleaks_8.18.2_linux_x64.tar.gz
                    mkdir -p $WORKSPACE/bin
                    mv gitleaks $WORKSPACE/bin/
                    export PATH=$WORKSPACE/bin:$PATH
                fi
                gitleaks detect --source . --report-path gitleaks-report.json || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'gitleaks-report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Package Applications') {
            steps {
                sh 'mvn clean package -f spring-minikube/student-service/pom.xml'
                sh 'mvn clean package -f spring-minikube/rating-service/pom.xml'
            }
        }

        stage('Unit Testing') {
            steps {
                sh 'mvn test -f spring-minikube/student-service/pom.xml'
                sh 'mvn test -f spring-minikube/rating-service/pom.xml'
            }
            post {
                always {
                    junit 'spring-minikube/**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Dependency Scanning') {
            steps {
                sh '''
                mvn org.owasp:dependency-check-maven:check -f spring-minikube/student-service/pom.xml -DfailBuildOnCVSS=11 || true
                mvn org.owasp:dependency-check-maven:check -f spring-minikube/rating-service/pom.xml -DfailBuildOnCVSS=11 || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'spring-minikube/**/target/dependency-check-report.html', allowEmptyArchive: true
                }
            }
        }

        stage('Static Analysis & Bug Analysis - SonarQube') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                    echo "Running SonarQube analysis..."
                    mvn sonar:sonar -f spring-minikube/student-service/pom.xml \
                        -Dsonar.projectKey=student-service \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=${SONAR_AUTH_TOKEN}

                    mvn sonar:sonar -f spring-minikube/rating-service/pom.xml \
                        -Dsonar.projectKey=rating-service \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=${SONAR_AUTH_TOKEN}
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                docker build -t student-service:latest spring-minikube/student-service/
                docker build -t rating-service:latest spring-minikube/rating-service/
                '''
            }
        }

        stage('Docker Image Scanning - Trivy') {
            steps {
                sh '''
                echo "Running Trivy scan on Docker images..."
                if ! command -v trivy &> /dev/null
                then
                    sudo apt-get update
                    sudo apt-get install -y wget apt-transport-https gnupg lsb-release
                    wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                    echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
                    sudo apt-get update
                    sudo apt-get install -y trivy
                fi
                trivy image --exit-code 0 --format table -o student-service-trivy-report.txt student-service:latest
                trivy image --exit-code 0 --format table -o rating-service-trivy-report.txt rating-service:latest
                trivy image --exit-code 0 --format json -o student-service-trivy-report.json student-service:latest
                trivy image --exit-code 0 --format json -o rating-service-trivy-report.json rating-service:latest
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: '*-trivy-report.*', allowEmptyArchive: true
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                sh '''
                kubectl apply -f spring-minikube/devops/deployment-student.yml
                kubectl apply -f spring-minikube/devops/service-student.yml
                kubectl apply -f spring-minikube/devops/deployment-rating.yml
                kubectl apply -f spring-minikube/devops/service-rating.yml
                kubectl apply -f spring-minikube/devops/ingress.yml
                '''
            }
        }

        stage('DAST - OWASP ZAP Scan') {
            steps {
                sh '''
                echo "Running OWASP ZAP DAST Scan..."
                if ! command -v zap-baseline.py &> /dev/null
                then
                    sudo apt-get update
                    sudo apt-get install -y zaproxy
                fi
                TARGET_URL="http://localhost"
                zap-baseline.py -t $TARGET_URL -r zap-report.html -J zap-report.json || true
                if command -v zap-cli &> /dev/null
                then
                    zap-cli report -o zap-report-full.html -f html
                fi
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'zap-report.html,zap-report.json,zap-report-full.html', allowEmptyArchive: true
                }
            }
        }

    }

    post {
        always {
            echo "Pipeline finished. Sending notifications..."
        }
        success {
            echo " Build, Security Checks & Deployment Successful!"
        }
        failure {
            echo " Pipeline Failed!"
        }
    }
}
