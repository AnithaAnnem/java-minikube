pipeline {
    agent any

    parameters {
        string(name: 'GIT_URL', defaultValue: 'https://github.com/AnithaAnnem/java-minikube.git', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        SONARQUBE_ENV = 'sonar-java'
        SONAR_AUTH_TOKEN = credentials('anitha-sonar')
        MINIKUBE_HOME = '/var/lib/jenkins/.minikube'   
        KUBECONFIG = '/var/lib/jenkins/.kube/config'  
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH}", url: "${params.GIT_URL}"
            }
        }

        stage('Credential Scanning - Gitleaks') {
            steps {
                sh '''
                echo "Running Gitleaks..."
                if ! command -v gitleaks &> /dev/null
                then
                    wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
                    tar -xvf gitleaks_8.18.2_linux_x64.tar.gz
                    mkdir -p $WORKSPACE/bin
                    mv gitleaks $WORKSPACE/bin/
                    export PATH=$WORKSPACE/bin:$PATH
                fi
                gitleaks detect --source . --report-path gitleaks-report.json || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'gitleaks-report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Package Applications') {
            steps {
                sh 'mvn clean package -f spring-minikube/student-service/pom.xml'
                sh 'mvn clean package -f spring-minikube/rating-service/pom.xml'
            }
        }

        stage('Unit Testing') {
            steps {
                sh 'mvn test -f spring-minikube/student-service/pom.xml'
                sh 'mvn test -f spring-minikube/rating-service/pom.xml'
            }
            post {
                always {
                    junit 'spring-minikube/**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Dependency Scanning') {
            steps {
                sh '''
                mvn org.owasp:dependency-check-maven:check -f spring-minikube/student-service/pom.xml -DfailBuildOnCVSS=11 || true
                mvn org.owasp:dependency-check-maven:check -f spring-minikube/rating-service/pom.xml -DfailBuildOnCVSS=11 || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'spring-minikube/**/target/dependency-check-report.html', allowEmptyArchive: true
                }
            }
        }

        stage('Static Analysis & Bug Analysis - SonarQube') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                    echo "Running SonarQube analysis..."
                    mvn sonar:sonar -f spring-minikube/student-service/pom.xml \
                        -Dsonar.projectKey=student-service \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_AUTH_TOKEN

                    mvn sonar:sonar -f spring-minikube/rating-service/pom.xml \
                        -Dsonar.projectKey=rating-service \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                docker build -t student-service:latest spring-minikube/student-service/
                docker build -t rating-service:latest spring-minikube/rating-service/
                '''
            }
        }

        stage('Docker Image Scanning - Trivy') {
            steps {
                sh '''
                echo "Running Trivy scan on Docker images..."
                trivy image --exit-code 0 --format table -o student-service-trivy-report.txt student-service:latest
                trivy image --exit-code 0 --format table -o rating-service-trivy-report.txt rating-service:latest
                trivy image --exit-code 0 --format json -o student-service-trivy-report.json student-service:latest
                trivy image --exit-code 0 --format json -o rating-service-trivy-report.json rating-service:latest
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: '*-trivy-report.*', allowEmptyArchive: true
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                sh '''
                echo "Deploying services to Minikube..."
                kubectl --kubeconfig=$KUBECONFIG apply -f spring-minikube/devops/deployment-student.yml
                kubectl --kubeconfig=$KUBECONFIG apply -f spring-minikube/devops/service-student.yml
                kubectl --kubeconfig=$KUBECONFIG apply -f spring-minikube/devops/deployment-rating.yml
                kubectl --kubeconfig=$KUBECONFIG apply -f spring-minikube/devops/service-rating.yml
                kubectl --kubeconfig=$KUBECONFIG apply -f spring-minikube/devops/ingress.yml
                '''
            }
        }

        stage('DAST - OWASP ZAP Scan') {
            steps {
                sh '''
                echo "Running OWASP ZAP DAST Scan..."

                # Get Minikube IP dynamically
                MINIKUBE_IP=$(minikube ip)
                TARGET_STUDENT="http://$MINIKUBE_IP:30001/student"
                TARGET_RATING="http://$MINIKUBE_IP:30002/rating"
                echo "Targets: $TARGET_STUDENT , $TARGET_RATING"

                # Wait until services are ready
                kubectl --kubeconfig=$KUBECONFIG wait --for=condition=ready pod -l run=student-service --timeout=60s
                kubectl --kubeconfig=$KUBECONFIG wait --for=condition=ready pod -l run=rating-service --timeout=60s

                # Run baseline scan for student service
                docker run --rm -v $WORKSPACE:/zap/wrk/:rw owasp/zap2docker-stable zap-baseline.py \
                    -t $TARGET_STUDENT -r zap-student-report.html -J zap-student-report.json || true

                # Run baseline scan for rating service
                docker run --rm -v $WORKSPACE:/zap/wrk/:rw owasp/zap2docker-stable zap-baseline.py \
                    -t $TARGET_RATING -r zap-rating-report.html -J zap-rating-report.json || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'zap-*-report.*', allowEmptyArchive: true
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true,
                        reportDir: '.', reportFiles: 'zap-*-report.html', reportName: 'OWASP ZAP Report'])
                }
            }
        }

    }

    post {
        always {
            echo "Pipeline finished. Sending notifications..."
        }
        success {
            echo "Build, Security Checks & Deployment Successful!"
        }
        failure {
            echo "Pipeline Failed!"
        }
    }
}
