pipeline {
    agent any

    parameters {
        string(name: 'GIT_URL', defaultValue: 'https://github.com/AnithaAnnem/java-minikube.git', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        SONARQUBE_ENV = 'sonar-java'
        SONAR_AUTH_TOKEN = credentials('anitha-sonar')
        MINIKUBE_HOME = '/var/lib/jenkins/.minikube'
        HOME = '/var/lib/jenkins'
        DOCKERHUB_USER = "anithaannem"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH}", url: "${params.GIT_URL}"
            }
        }

        stage('Credential Scanning - Gitleaks') {
            steps {
                sh '''
                echo "Running Gitleaks..."
                if ! command -v gitleaks &> /dev/null
                then
                    wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
                    tar -xvf gitleaks_8.18.2_linux_x64.tar.gz
                    mkdir -p $WORKSPACE/bin
                    mv gitleaks $WORKSPACE/bin/
                    export PATH=$WORKSPACE/bin:$PATH
                fi
                gitleaks detect --source . --report-path gitleaks-report.json || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'gitleaks-report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Package Student Service') {
            steps { sh 'mvn clean package -f spring-minikube/student-service/pom.xml' }
        }

        stage('Package Rating Service') {
            steps { sh 'mvn clean package -f spring-minikube/rating-service/pom.xml' }
        }

        stage('Unit Test Student Service') {
            steps { sh 'mvn test -f spring-minikube/student-service/pom.xml' }
            post { always { junit 'spring-minikube/student-service/target/surefire-reports/*.xml' } }
        }

        stage('Unit Test Rating Service') {
            steps { sh 'mvn test -f spring-minikube/rating-service/pom.xml' }
            post { always { junit 'spring-minikube/rating-service/target/surefire-reports/*.xml' } }
        }

        stage('Dependency Scanning') {
            steps {
                sh '''
                mvn org.owasp:dependency-check-maven:check -f spring-minikube/student-service/pom.xml -DfailBuildOnCVSS=11 || true
                mvn org.owasp:dependency-check-maven:check -f spring-minikube/rating-service/pom.xml -DfailBuildOnCVSS=11 || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'spring-minikube/**/target/dependency-check-report.html', allowEmptyArchive: true
                }
            }
        }

        stage('SonarQube Analysis - Student Service') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                    mvn sonar:sonar -f spring-minikube/student-service/pom.xml \
                        -Dsonar.projectKey=student-service \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('SonarQube Analysis - Rating Service') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                    mvn sonar:sonar -f spring-minikube/rating-service/pom.xml \
                        -Dsonar.projectKey=rating-service \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('Build & Push Student Service Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    docker build -t $DOCKER_USER/student-service:1.0 spring-minikube/student-service/
                    docker push $DOCKER_USER/student-service:1.0
                    '''
                }
            }
        }

        stage('Build & Push Rating Service Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    docker build -t $DOCKER_USER/rating-service:1.0 spring-minikube/rating-service/
                    docker push $DOCKER_USER/rating-service:1.0
                    '''
                }
            }
        }

        stage('Start Minikube') {
            steps {
                sh '''
                export MINIKUBE_HOME=/var/lib/jenkins/.minikube
                export HOME=/var/lib/jenkins
                minikube delete || true
                minikube start --driver=docker
                minikube status
                '''
            }
        }

        stage('Setup K8s Configs') {
            steps {
                sh '''
                echo "Applying K8s Configurations..."
                minikube kubectl -- apply -f spring-minikube/devops/configmap.yml || true
                minikube kubectl -- apply -f spring-minikube/devops/secret.yml || true
                minikube kubectl -- apply -f spring-minikube/devops/ingress.yml || true
                '''
            }
        }

        stage('Deploy Student Service') {
            steps {
                sh '''
                minikube kubectl -- apply -f spring-minikube/devops/deployment-student.yml
                minikube kubectl -- apply -f spring-minikube/devops/service-student.yml
                '''
            }
        }

        stage('Deploy Rating Service') {
            steps {
                sh '''
                minikube kubectl -- apply -f spring-minikube/devops/deployment-rating.yml
                minikube kubectl -- apply -f spring-minikube/devops/service-rating.yml
                '''
            }
        }

        stage('DAST - OWASP ZAP Scan') {
            steps {
                sh '''
                echo "Running OWASP ZAP DAST Scan..."
                MINIKUBE_IP=$(minikube ip)
                TARGET_STUDENT="http://$MINIKUBE_IP:30001/student"
                TARGET_RATING="http://$MINIKUBE_IP:30002/rating"

                minikube kubectl -- wait --for=condition=ready pod -l run=student-service --timeout=180s
                minikube kubectl -- wait --for=condition=ready pod -l run=rating-service --timeout=180s

                docker run --rm -v $WORKSPACE:/zap/wrk/:rw owasp/zap2docker-stable zap-baseline.py \
                    -t $TARGET_STUDENT -r zap-student-report.html -J zap-student-report.json || true

                docker run --rm -v $WORKSPACE:/zap/wrk/:rw owasp/zap2docker-stable zap-baseline.py \
                    -t $TARGET_RATING -r zap-rating-report.html -J zap-rating-report.json || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'zap-*-report.*', allowEmptyArchive: true
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true,
                        reportDir: '.', reportFiles: 'zap-*-report.html', reportName: 'OWASP ZAP Report'])
                }
            }
        }

    }

    post {
        success { echo " Pipeline Successful: Build, Analysis, Docker Push & Deployment Completed!" }
        failure { echo " Pipeline Failed!" }
    }
}
