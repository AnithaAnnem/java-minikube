pipeline {
    agent any

    parameters {
        string(name: 'GIT_URL', defaultValue: 'https://github.com/AnithaAnnem/java-minikube.git', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        SONARQUBE_ENV = 'sonar-java'
        SONAR_AUTH_TOKEN = credentials('anitha-sonar')
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH}", url: "${params.GIT_URL}"
            }
        }

        stage('Package Student Service') {
            steps {
                sh 'mvn clean package -f spring-minikube/student-service/pom.xml'
            }
        }

        stage('Package Rating Service') {
            steps {
                sh 'mvn clean package -f spring-minikube/rating-service/pom.xml'
            }
        }

        stage('Unit Test Student Service') {
            steps {
                sh 'mvn test -f spring-minikube/student-service/pom.xml'
            }
            post {
                always {
                    junit 'spring-minikube/student-service/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Unit Test Rating Service') {
            steps {
                sh 'mvn test -f spring-minikube/rating-service/pom.xml'
            }
            post {
                always {
                    junit 'spring-minikube/rating-service/target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis - Student Service') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                    mvn sonar:sonar -f spring-minikube/student-service/pom.xml \
                        -Dsonar.projectKey=student-service \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('SonarQube Analysis - Rating Service') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                    mvn sonar:sonar -f spring-minikube/rating-service/pom.xml \
                        -Dsonar.projectKey=rating-service \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('Build & Push Student Service Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    docker build -t $DOCKER_USER/student-service:1.0 spring-minikube/student-service/
                    docker push $DOCKER_USER/student-service:1.0
                    '''
                }
            }
        }

        stage('Build & Push Rating Service Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    docker build -t $DOCKER_USER/rating-service:1.0 spring-minikube/rating-service/
                    docker push $DOCKER_USER/rating-service:1.0
                    '''
                }
            }
        }

        stage('Setup K8s Configs') {
            steps {
                sh '''
                echo "Applying K8s Configurations..."
                kubectl apply -f spring-minikube/devops/configmap.yml || true
                kubectl apply -f spring-minikube/devops/secret.yml || true
                kubectl apply -f spring-minikube/devops/ingress.yml || true
                '''
            }
        }

        stage('Deploy Student Service') {
            steps {
                sh '''
                kubectl apply -f spring-minikube/devops/deployment-student.yml
                kubectl apply -f spring-minikube/devops/service-student.yml
                '''
            }
        }

        stage('Deploy Rating Service') {
            steps {
                sh '''
                kubectl apply -f spring-minikube/devops/deployment-rating.yml
                kubectl apply -f spring-minikube/devops/service-rating.yml
                '''
            }
        }

    }

    post {
        success {
            echo " Build, Analysis, Docker Push & Deployment Successful!"
        }
        failure {
            echo " Pipeline Failed!"
        }
    }
}
